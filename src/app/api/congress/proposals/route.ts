import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'

export async function GET(req: NextRequest) {
  const session = await getServerSession()

  if (!session) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
  }

  // In a real implementation, you would fetch proposals from a database
  // This is just a mock implementation
  return NextResponse.json({ 
    proposals: [
      {
        id: '1',
        title: 'Right to Bear Arms',
        content: 'This proposal aims to establish the right of Martian citizens to own and bear arms for self-defense.',
        status: 'voting',
        active: true,
        yesVotes: 45,
        noVotes: 55,
        createdAt: new Date('2025-03-15'),
        endsAt: new Date('2025-04-15'),
      },
      {
        id: '2',
        title: 'Martian Marriage Act',
        content: 'This proposal defines the legal framework for marriage on Mars.',
        status: 'passed',
        active: false,
        yesVotes: 70,
        noVotes: 30,
        createdAt: new Date('2025-02-01'),
        endsAt: new Date('2025-03-01'),
      }
    ]
  })
}

export async function POST(req: NextRequest) {
  const session = await getServerSession()

  if (!session) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
  }

  try {
    const body = await req.json()
    
    // Validate the proposal data
    if (!body.title || !body.content) {
      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 })
    }

    // In a real implementation, you would save the proposal to a database
    // and potentially perform blockchain operations
    
    return NextResponse.json({ 
      success: true,
      proposal: {
        id: '3', // This would normally be generated by the database
        title: body.title,
        content: body.content,
        status: 'submitted',
        active: true,
        yesVotes: 0,
        noVotes: 0,
        createdAt: new Date(),
        endsAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now
      }
    })
  } catch (error) {
    return NextResponse.json({ error: 'Invalid request body' }, { status: 400 })
  }
}